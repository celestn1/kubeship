# kubeship/helm-charts/nginx-gateway/templates/configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: {{ .Values.namespace | default .Release.Namespace }}
data:
  nginx.conf: |
    worker_processes 1;
    events { worker_connections 1024; }

    http {
      include       mime.types;
      default_type  application/json;
      sendfile      on;
      keepalive_timeout 65;

      # HTTP server for ACME and redirect
      server {
          listen 80;
          server_name _;

          # health check
          location = /health {
              return 200 'OK';
              add_header Content-Type text/plain;
          }

          # ACME HTTP-01 challenge
          location ^~ /.well-known/acme-challenge/ {
              proxy_pass http://localhost:8089;
              proxy_set_header Host $host;
          }


          # Redirect HTTP to HTTPS
          location / {
              return 301 https://$host$request_uri;
          }
      }

      # HTTPS server
      server {
          listen 443 ssl;
          server_name kubeship.celestn.com;

          ssl_certificate     /etc/nginx/ssl/tls.crt;
          ssl_certificate_key /etc/nginx/ssl/tls.key;

          ssl_protocols       TLSv1.2 TLSv1.3;
          ssl_ciphers         HIGH:!aNULL:!MD5;

          # proxy to auth-service
          location /v1/auth/ {
              proxy_pass         http://auth-service.auth-service.svc.cluster.local:8001;
              proxy_http_version 1.1;
              proxy_set_header   Host              $host;
              proxy_set_header   X-Real-IP         $remote_addr;
              proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
              proxy_set_header   X-Forwarded-Proto $scheme;
              proxy_set_header   Upgrade           $http_upgrade;
              proxy_set_header   Connection        "upgrade";
              proxy_read_timeout    90;
              proxy_connect_timeout 90;
          }

        # More microservices can be added here:
        # location /v1/payments/ { proxy_pass http://payments:80; â€¦ }

          # React SPA fallback
          location / {
              try_files $uri $uri/ @spa;
          }

          location @spa {
              internal;
              rewrite ^ /index.html break;
          }


        # friendly errors
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        root /usr/share/nginx/html;
        }
      }
    }