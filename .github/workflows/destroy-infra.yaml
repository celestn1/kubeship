# .github/workflows/destroy-infra.yaml

name: Destroy KubeShip Infrastructure on AWS EKS

on:
  workflow_dispatch:   # manual trigger

concurrency:
  group: destroy-infra-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write     # for OIDC
  contents: read

env:
  REGION:                        ${{ secrets.AWS_REGION }}
  TF_STATE_BUCKET:               ${{ secrets.TF_STATE_BUCKET }}
  TF_LOCK_TABLE:                 ${{ secrets.TF_LOCK_TABLE }}
  TF_VAR_project_name:           ${{ secrets.TF_PROJECT_NAME }}
  TF_VAR_environment:            ${{ secrets.TF_ENVIRONMENT }}
  TF_VAR_eks_cluster_name:       ${{ secrets.TF_EKS_CLUSTER_NAME }}
  TF_VAR_gitops_repo_url:        ${{ secrets.TF_GITOPS_REPO_URL }}
  TF_VAR_target_revision:        ${{ secrets.TF_TARGET_REVISION }}
  TF_VAR_argocd_app_manifest_path: ${{ secrets.TF_ARGOCD_APP_MANIFEST_PATH }}
  TF_VAR_terraform_caller_arn:   ${{ secrets.CI_IAM_ROLE_ARN }}

jobs:
  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Authenticate to AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ secrets.CI_IAM_ROLE_ARN }}
          aws-region:        ${{ env.REGION }}
          role-session-name: github-actions-eks-destroy

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: |
          terraform init -upgrade \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=infra/terraform.tfstate" \
            -backend-config="region=${REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}"

      - name: Get Kubernetes config
        run: |
          aws eks update-kubeconfig --name ${{ env.TF_VAR_eks_cluster_name }} --region ${{ env.AWS_REGION}}

      - name: Delete ArgoCD apps
        run: |
          kubectl delete -f ../manifests/argocd-applications -n argocd        

      - name: Delete non-ArgoCD manifests
        run: |
          kubectl delete -f ../manifests/base/

      - name: Explicitly Delete Kubernetes Resources
        run: |
          kubectl delete svc --all -A --ignore-not-found
          kubectl delete pvc --all -A --ignore-not-found
          kubectl delete ingress --all -A --ignore-not-found
          kubectl delete deployments --all -A --ignore-not-found
          kubectl delete statefulsets --all -A --ignore-not-found
          kubectl delete pods --all -A --ignore-not-found
          kubectl delete namespaces argocd external-secrets cert-manager --ignore-not-found

      - name: Remove Helm releases explicitly
        run: |
          helm uninstall argocd -n argocd || true
          helm uninstall external-secrets -n external-secrets || true
          helm uninstall cert-manager -n cert-manager || true

      - name: Terraform Destroy
        run: terraform destroy -auto-approve