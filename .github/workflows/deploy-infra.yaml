# ------------------------------
# .github/workflows/deploy-infra.yaml
# ------------------------------

name: Deploy KubeShip Infrastructure on AWS EKS

on:
  push:
    branches:
      - main
    paths:
      - terraform/**
      - .github/workflows/deploy-infra.yaml
      - microservices/**
      - nginx/**
      - shared/**      

concurrency:
  group: deploy-infra-${{ github.ref }}
  cancel-in-progress: true

env:
  REGION:          ${{ secrets.AWS_REGION }}
  ACCOUNT_ID:      ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_TAG:       latest
  TF_PROJECT_NAME: ${{ secrets.TF_PROJECT_NAME }}

jobs:
  build-and-push:
    name: Build & Push Docker images to Amazon ECR
    runs-on: ubuntu-latest
    outputs:
      auth-service-digest: ${{ steps.auth-digest.outputs.digest }}
      frontend-digest:     ${{ steps.frontend-digest.outputs.digest }}
      nginx-digest:        ${{ steps.nginx-digest.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Detect changed services
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            # Define the paths for each service
            auth-service:
             - 'microservices/auth-service/**'
            frontend:
              - 'microservices/frontend/**'
            nginx-gateway:
              - 'nginx/**'
            shared:
              - 'shared/**'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region:            ${{ env.REGION }}
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Ensure all ECR repos exist
        run: |
          for svc in auth-service frontend nginx-gateway; do
            aws ecr describe-repositories \
              --repository-names "${TF_PROJECT_NAME}-${svc}" \
              --region "${REGION}" >/dev/null 2>&1 || \
            aws ecr create-repository \
              --repository-name "${TF_PROJECT_NAME}-${svc}" \
              --region "${REGION}"
          done

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          use: true

      # auth-service
      - name: Build & Push auth-service
        if: steps.changes.outputs['auth-service'] == 'true' || steps.changes.outputs.shared == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./microservices/auth-service
          file:    ./microservices/auth-service/Dockerfile
          push:    true
          tags: |
            ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.TF_PROJECT_NAME }}-auth-service:latest

      - name: Capture auth-service image digest
        id: auth-digest
        if: steps.changes.outputs['auth-service'] == 'true' || steps.changes.outputs.shared == 'true'
        run: |
          IMAGE_URI=${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.TF_PROJECT_NAME }}-auth-service
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_URI:${{ env.IMAGE_TAG }})
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      # frontend
      - name: Build & Push frontend
        if: steps.changes.outputs.frontend == 'true' || steps.changes.outputs.shared == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file:    microservices/frontend/Dockerfile
          push:    true
          tags: |
            ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.TF_PROJECT_NAME }}-frontend:latest

      - name: Capture frontend image digest
        id: frontend-digest
        if: steps.changes.outputs.frontend == 'true' || steps.changes.outputs.shared == 'true'
        run: |
          IMAGE_URI=${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.TF_PROJECT_NAME }}-frontend
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_URI:${{ env.IMAGE_TAG }})
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      # nginx-gateway
      - name: Build & Push nginx-gateway
        if: steps.changes.outputs['nginx-gateway'] == 'true' || steps.changes.outputs.shared == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          file:    ./nginx/Dockerfile
          push:    true
          tags: |
            ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.TF_PROJECT_NAME }}-nginx-gateway:latest

      - name: Capture nginx-gateway image digest
        id: nginx-digest
        if: steps.changes.outputs['nginx-gateway'] == 'true' || steps.changes.outputs.shared == 'true'
        run: |
          IMAGE_URI=${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.TF_PROJECT_NAME }}-nginx-gateway
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_URI:${{ env.IMAGE_TAG }})
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

  deploy:
    name: Terraform Apply
    needs: build-and-push
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    env:
      AWS_REGION:                   ${{ secrets.AWS_REGION }}
      TF_PROJECT_NAME:              ${{ secrets.TF_PROJECT_NAME }}
      TF_ENVIRONMENT:               ${{ secrets.TF_ENVIRONMENT }}
      TF_EKS_CLUSTER_NAME:          ${{ secrets.TF_EKS_CLUSTER_NAME }}
      TF_STATE_BUCKET:              ${{ secrets.TF_STATE_BUCKET }}
      TF_LOCK_TABLE:                ${{ secrets.TF_LOCK_TABLE }}
      TF_GITOPS_REPO_URL:           ${{ secrets.TF_GITOPS_REPO_URL }}
      TF_TARGET_REVISION:           ${{ secrets.TF_TARGET_REVISION }}
      TF_ARGOCD_APP_MANIFEST_PATH:  ${{ secrets.TF_ARGOCD_APP_MANIFEST_PATH }}
      TF_AVAILABILITY_ZONE_1:       ${{ secrets.TF_AVAILABILITY_ZONE_1 }}
      TF_AVAILABILITY_ZONE_2:       ${{ secrets.TF_AVAILABILITY_ZONE_2 }}     

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region:            ${{ env.AWS_REGION }}
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Fetch AWS caller ARN
        id: caller
        run: |
          arn=$(aws sts get-caller-identity --query Arn --output text)
          echo "TF_VAR_terraform_caller_arn=$arn" >> $GITHUB_ENV          

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: |
          # Dump the vars so we can see if any are empty
          echo "TF_STATE_BUCKET=${TF_STATE_BUCKET}"
          echo "TF_LOCK_TABLE=${TF_LOCK_TABLE}"
          echo "AWS_REGION=${AWS_REGION}"
                  
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=infra/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}"

      - name: Terraform Plan
        run: |
          terraform plan \
            -lock-timeout=2m \
            -var="project_name=${TF_PROJECT_NAME}" \
            -var="environment=${TF_ENVIRONMENT}" \
            -var="eks_cluster_name=${TF_EKS_CLUSTER_NAME}" \
            -var="gitops_repo_url=${TF_GITOPS_REPO_URL}" \
            -var="target_revision=${TF_TARGET_REVISION}" \
            -var="argocd_app_manifest_path=${TF_ARGOCD_APP_MANIFEST_PATH}" \
            -var="availability_zones=[\"${TF_AVAILABILITY_ZONE_1}\",\"${TF_AVAILABILITY_ZONE_2}\"]" \
            -var="auth_image_digest=${{ needs.build-and-push.outputs.auth-service-digest }}" \
            -var="frontend_image_digest=${{ needs.build-and-push.outputs.frontend-digest }}" \
            -var="nginx_image_digest=${{ needs.build-and-push.outputs.nginx-digest }}" \
            -out=tfplan.out

      - name: Terraform Apply
        run: terraform apply -lock-timeout=2m -auto-approve tfplan.out

      - name: Save Terraform outputs
        run: terraform output -json > tf-outputs.json
