# ------------------------------
# .github/workflows/deploy-infra.yaml
# ------------------------------

# .github/workflows/deploy-infra.yaml
name: Deploy KubeShip Infrastructure on AWS EKS

on:
  push:
    branches:
      - main
    paths:
      - terraform/**
      - .github/workflows/deploy-infra.yaml

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    env:
      AWS_REGION:                              ${{ secrets.AWS_REGION }}
      TF_PROJECT_NAME:                         ${{ secrets.TF_PROJECT_NAME }}
      TF_ENVIRONMENT:                          ${{ secrets.TF_ENVIRONMENT }}
      TF_EKS_CLUSTER_NAME:                     ${{ secrets.TF_EKS_CLUSTER_NAME }}
      TF_EKS_CLUSTER_VERSION:                  ${{ secrets.TF_EKS_CLUSTER_VERSION }}
      TF_GITOPS_REPO_URL:                      ${{ secrets.TF_GITOPS_REPO_URL }}
      TF_TARGET_REVISION:                      ${{ secrets.TF_TARGET_REVISION }}
      TF_ARGOCD_APP_MANIFEST_PATH:             ${{ secrets.TF_ARGOCD_APP_MANIFEST_PATH }}
      TF_AVAILABILITY_ZONE_1:                  ${{ secrets.TF_AVAILABILITY_ZONE_1 }}
      TF_AVAILABILITY_ZONE_2:                  ${{ secrets.TF_AVAILABILITY_ZONE_2 }}
      TF_STATE_BUCKET:                         ${{ secrets.TF_STATE_BUCKET }}
      TF_LOCK_TABLE:                           ${{ secrets.TF_LOCK_TABLE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          use: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init & Validate
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=infra/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}"
          terraform fmt -recursive
          terraform fmt -check -recursive
          terraform validate

      - name: Dump TF_* envs for debug
        run: |
          echo "---- TF_* ENVIRONMENT DUMP ----"
          env | grep '^TF_' || true

      - name: Check required secrets
        run: |
          REQUIRED=( TF_PROJECT_NAME TF_ENVIRONMENT TF_EKS_CLUSTER_NAME TF_EKS_CLUSTER_VERSION TF_GITOPS_REPO_URL TF_TARGET_REVISION TF_ARGOCD_APP_MANIFEST_PATH TF_AVAILABILITY_ZONE_1 TF_AVAILABILITY_ZONE_2 TF_STATE_BUCKET TF_LOCK_TABLE )
          for key in "${REQUIRED[@]}"; do
            if [ -z "${!key}" ]; then
              echo "Missing secret $key"
              exit 1
            fi
          done

      - name: Generate secrets.auto.tfvars.json
        run: |
          cat > secrets.auto.tfvars.json <<EOF
          {
            "secrets_map": {
              "JWT_SECRET_KEY": "${{ secrets.JWT_SECRET_KEY }}",
              "JWT_ALGORITHM": "${{ secrets.JWT_ALGORITHM }}",
              "DATABASE_URL": "${{ secrets.DATABASE_URL }}",
              "REDIS_URL": "${{ secrets.REDIS_URL }}"
            }
          }
          EOF

      - name: Validate secrets file
        run: |
          MISSING=$(jq -r '
            .secrets_map
            | to_entries[]
            | select(.value == "" or .value == null)
            | .key
          ' secrets.auto.tfvars.json)

          if [ -n "$MISSING" ]; then
            echo "Empty secrets: $MISSING"
            exit 1
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repos exist
        run: |
          for svc in auth-service frontend nginx-gateway; do
            repo="${TF_PROJECT_NAME}-$svc"
            aws ecr describe-repositories --repository-names "$repo" >/dev/null 2>&1 || \
              aws ecr create-repository --repository-name "$repo"
          done

      # === Build & Push auth-service ===
      - name: Build & Push auth-service
        uses: docker/build-push-action@v4
        with:
          context: ./microservices/auth-service
          file: ./microservices/auth-service/Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.TF_PROJECT_NAME }}-auth-service:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.TF_PROJECT_NAME }}-auth-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # === Build & Push frontend ===
      - name: Build & Push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./microservices/frontend
          file: ./microservices/frontend/Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.TF_PROJECT_NAME }}-frontend:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.TF_PROJECT_NAME }}-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      # === Build & Push nginx-gateway ===
      - name: Build & Push nginx-gateway
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.TF_PROJECT_NAME }}-nginx-gateway:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.TF_PROJECT_NAME }}-nginx-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Terraform Plan & Apply
        run: |
          terraform plan -input=false -out=tfplan.out \
            -var-file="secrets.auto.tfvars.json" \
            -var="project_name=${TF_PROJECT_NAME}" \
            -var="environment=${TF_ENVIRONMENT}" \
            -var="aws_region=${AWS_REGION}" \
            -var="eks_cluster_name=${TF_EKS_CLUSTER_NAME}" \
            -var="eks_cluster_version=${TF_EKS_CLUSTER_VERSION}" \
            -var="gitops_repo_url=${TF_GITOPS_REPO_URL}" \
            -var="target_revision=${TF_TARGET_REVISION}" \
            -var="argocd_app_manifest_path=${TF_ARGOCD_APP_MANIFEST_PATH}" \
            -var="availability_zones=[\"${TF_AVAILABILITY_ZONE_1}\",\"${TF_AVAILABILITY_ZONE_2}\"]"
          terraform apply -auto-approve tfplan.out

      - name: Save Terraform outputs
        run: terraform output -json > tf-outputs.json
