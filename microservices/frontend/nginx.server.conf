# kubeship/microservices/frontend/nginx.server.conf

server {
    listen       80;
    server_name  _;

    root   /usr/share/nginx/html;
    index  index.html;

    # 1) Let Kubernetes / cert-manager health checks pass:
    location = /health {
      return 200 'OK';
      add_header Content-Type text/plain;
    }

    # 2) Handle ACME HTTP01 challenges directly (so cert-manager works):
    location ^~ /.well-known/acme-challenge/ {
      # cert-manager creates these files under /usr/share/nginx/html/.well-known/â€¦
      alias /usr/share/nginx/html/.well-known/acme-challenge/;
      default_type "text/plain";
    }

    # 3) Proxy your API:
    location /v1/auth/ {
        proxy_pass         http://auth-service.auth-service.svc.cluster.local:8001;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Upgrade           $http_upgrade;
        proxy_set_header   Connection        "upgrade";
        proxy_read_timeout    90;
        proxy_connect_timeout 90;
    }

    # 4) Catch-all for your React app:
    #    if the file exists, serve it; otherwise hand off to @spa
    location / {
      try_files $uri $uri/ @spa;
    }

    location @spa {
      # internal so it never loops back into location /
      internal;
      rewrite ^ /index.html break;
    }

    # 5) Friendly error pages
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
